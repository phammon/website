/* what is a mixin? reusable chunk of code
ex: you have properties that you want to use for your button, instead of remembering
what those properties are you can define them in a mixin and then use it as a selector
instead  */

@mixin clearfix {
    &::after {
        content: "";
        display: table;
        clear: both //clears both float left and float right 
    }
}
/*It is important to remember that a clearfix is a type of hack 
used to fix problems associated with floating child elements within a parent element. */

/*
phone - 0 - 600px
Tablet Portrait - 600px - 900px
Tablet Landscape - 900px - 1200px
Normal:             1200 - 1800px
Big Desktop:        1800px ++ 
*/

// 1em = 16px
//1rem = 10px;

//we use ems here because if the user zooms in or out the ems will adjust as opposed to pixels
@mixin respond($breakpoint) {
    @if $breakpoint == small-phone {
        @media (max-width: 24em) { @content };
    }
    @if $breakpoint == phone {
        @media (max-width: 37.5em ) { @content }; //600px 600/16
    }
    @if $breakpoint == tab-port {
        @media (max-width: 56.25em ) { @content }; //900px 900/16
    }
    @if $breakpoint == tab-land {
        @media (max-width: 75em ) { @content }; //1200px 1200/16
    }
    @if $breakpoint == big-desktop {
        @media (min-width: 112.5em ) { @content }; //1800px 1800/16
    }
}